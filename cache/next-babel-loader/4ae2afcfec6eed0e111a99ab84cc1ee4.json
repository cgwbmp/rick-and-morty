{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nvar entrypoint = 'https://rickandmortyapi.com';\n\nfunction getCharacters() {\n  return _getCharacters.apply(this, arguments);\n}\n\nfunction _getCharacters() {\n  _getCharacters = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var page,\n        source,\n        response,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            page = _args.length > 0 && _args[0] !== undefined ? _args[0] : 1;\n            _context.next = 3;\n            return fetch(\"\".concat(entrypoint, \"/api/character?page=\").concat(page));\n\n          case 3:\n            source = _context.sent;\n            _context.next = 6;\n            return source.json();\n\n          case 6:\n            response = _context.sent;\n\n            if (!('error' in response)) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              error: {\n                code: source.status,\n                message: response.error\n              }\n            });\n\n          case 9:\n            return _context.abrupt(\"return\", response);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getCharacters.apply(this, arguments);\n}\n\nexport default getCharacters;\nexport { getCharacters };","map":{"version":3,"sources":["/home/mq/Documents/rick-and-morty/src/api/characters.ts"],"names":["fetch","entrypoint","getCharacters","page","source","json","response","error","code","status","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAGA,IAAMC,UAAU,GAAG,6BAAnB;;SA+BeC,a;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6BC,YAAAA,IAA7B,2DAA4C,CAA5C;AAAA;AAAA,mBACiCH,KAAK,WAAIC,UAAJ,iCAAqCE,IAArC,EADtC;;AAAA;AACQC,YAAAA,MADR;AAAA;AAAA,mBAEkEA,MAAM,CAACC,IAAP,EAFlE;;AAAA;AAEQC,YAAAA,QAFR;;AAAA,kBAGM,WAAWA,QAHjB;AAAA;AAAA;AAAA;;AAAA,6CAIW;AACLC,cAAAA,KAAK,EAAE;AACLC,gBAAAA,IAAI,EAAEJ,MAAM,CAACK,MADR;AAELC,gBAAAA,OAAO,EAAEJ,QAAQ,CAACC;AAFb;AADF,aAJX;;AAAA;AAAA,6CAWSD,QAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcA,eAAeJ,aAAf;AACA,SACEA,aADF","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Error } from '../types';\n\nconst entrypoint = 'https://rickandmortyapi.com';\n\ninterface OriginalApiResponse {\n  results: Array<{\n    id: string,\n    name: string,\n    gender: string,\n    species: string,\n    location: {\n      name: string,\n    },\n    status: string,\n    image: string,\n  }>,\n  info: {\n    count: number,\n    pages: number,\n  },\n}\n\ninterface OriginalApiReject {\n  error: string,\n}\n\ninterface ApiResponse extends OriginalApiResponse {\n}\n\ninterface ApiReject {\n  error: Error,\n}\n\nasync function getCharacters(page: number = 1): Promise<ApiResponse | ApiReject> {\n  const source: Response = await fetch(`${entrypoint}/api/character?page=${page}`);\n  const response: OriginalApiResponse | OriginalApiReject = await source.json();\n  if ('error' in response) {\n    return {\n      error: {\n        code: source.status,\n        message: response.error,\n      },\n    };\n  }\n  return response;\n}\n\nexport default getCharacters;\nexport {\n  getCharacters,\n};\n"]},"metadata":{},"sourceType":"module"}